"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[396],{3905:(e,t,r)=>{r.d(t,{Zo:()=>l,kt:()=>f});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var p=n.createContext({}),c=function(e){var t=n.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},l=function(e){var t=c(e.components);return n.createElement(p.Provider,{value:t},e.children)},u="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,p=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),u=c(r),d=o,f=u["".concat(p,".").concat(d)]||u[d]||h[d]||a;return r?n.createElement(f,i(i({ref:t},l),{},{components:r})):n.createElement(f,i({ref:t},l))}));function f(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=d;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s[u]="string"==typeof e?e:o,i[1]=s;for(var c=2;c<a;c++)i[c]=r[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},3505:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>h,frontMatter:()=>a,metadata:()=>s,toc:()=>c});var n=r(7462),o=(r(7294),r(3905));const a={sidebar_position:8,title:"\ud83d\udc77 Status",description:"Status of the Shorebird project."},i=void 0,s={unversionedId:"status",id:"status",title:"\ud83d\udc77 Status",description:"Status of the Shorebird project.",source:"@site/docs/status.md",sourceDirName:".",slug:"/status",permalink:"/status",draft:!1,editUrl:"https://github.com/shorebirdtech/docs/tree/main/docs/status.md",tags:[],version:"current",sidebarPosition:8,frontMatter:{sidebar_position:8,title:"\ud83d\udc77 Status",description:"Status of the Shorebird project."},sidebar:"tutorialSidebar",previous:{title:"\u2753 FAQ",permalink:"/faq"},next:{title:"\ud83c\udfdb\ufe0f Architecture",permalink:"/architecture"}},p={},c=[{value:"Stable",id:"stable",level:2},{value:"Link Percentage (iOS)",id:"link-percentage-ios",level:2}],l={toc:c},u="wrapper";function h(e){let{components:t,...r}=e;return(0,o.kt)(u,(0,n.Z)({},l,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"stable"},"Stable"),(0,o.kt)("p",null,"Shorebird is available on Android and iOS, with ~1000 apps using Shorebird on\nthe App Store and Play Store."),(0,o.kt)("h2",{id:"link-percentage-ios"},"Link Percentage (iOS)"),(0,o.kt)("p",null,"As part of ",(0,o.kt)("a",{parentName:"p",href:"faq#does-shorebird-comply-with-app-store-guidelines"},"complying with the the App Store\nguidelines"),", Shorebird uses\nan interpreter on iOS to run any changed Dart code in your patch. This\ninterpreter runs Dart about 100x slower than running on the CPU. To make patches\nrun fast, Shorebird has modified the Dart compiler and runtime to make it\npossible to ",(0,o.kt)("em",{parentName:"p"},"only")," run changed code on the interpreter and run any unchanged\ncode on the CPU. This determination is done at a per-function level."),(0,o.kt)("p",null,'The program that decides which code runs on the CPU vs the interpreter is called\nthe "linker" and we call this percentage the "link percentage".'),(0,o.kt)("p",null,'Most of the time this system works very well, and Shorebird is able to run 90%+\nof your Dart code on the CPU. However there are still a few types of changes\nwhich can confuse the "linker" into running more code on the interpreter than\nnecessary.'),(0,o.kt)("p",null,"Known linker issues include:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/shorebirdtech/shorebird/issues/1825"},"Adding or removing a class can affect link percentage"))),(0,o.kt)("p",null,"If your app has reported an unexpectedly low link percentage, please let us\nknow, we'd love to help. You can report an issue here:\n",(0,o.kt)("a",{parentName:"p",href:"https://github.com/shorebirdtech/shorebird/issues"},"https://github.com/shorebirdtech/shorebird/issues"),"\nOr reach us via Discord: ",(0,o.kt)("a",{parentName:"p",href:"https://discord.gg/shorebird"},"https://discord.gg/shorebird"),"."),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"Link percentage is not itself a great measure of performance. We've seen apps\nlink only 30% and run smoothly, and other apps link 99.5% and struggle to run\nat 30fps. What matters is that the hot code paths in your app end up on the\nCPU. Most of the time, all the hot code paths in your app are the ones deep\ninside Flutter's framework (which very few apps ever change), and those end up\non the CPU. However if your app does a lot of intensive computation in Dart,\nyou may notice a slowdown in your app if you change those functions in a patch."),(0,o.kt)("p",{parentName:"admonition"},"Regardless, if you ever see slowdowns when patching your app, please\nlet us know. There are many ways we can continue to improve Shorebird's\nupdate system to run patches without any performance impact.")))}h.isMDXComponent=!0}}]);