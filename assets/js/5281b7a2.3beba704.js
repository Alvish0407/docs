"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[927],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>b});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var s=n.createContext({}),h=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},u=function(e){var t=h(e.components);return n.createElement(s.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=h(r),c=o,b=d["".concat(s,".").concat(c)]||d[c]||p[c]||a;return r?n.createElement(b,i(i({ref:t},u),{},{components:r})):n.createElement(b,i({ref:t},u))}));function b(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=c;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[d]="string"==typeof e?e:o,i[1]=l;for(var h=2;h<a;h++)i[h]=r[h];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}c.displayName="MDXCreateElement"},1527:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>p,frontMatter:()=>a,metadata:()=>l,toc:()=>h});var n=r(7462),o=(r(7294),r(3905));const a={sidebar_position:9,title:"\ud83c\udfdb\ufe0f Architecture",description:"How Shorebird works."},i="Shorebird Architecture",l={unversionedId:"architecture",id:"architecture",title:"\ud83c\udfdb\ufe0f Architecture",description:"How Shorebird works.",source:"@site/docs/architecture.md",sourceDirName:".",slug:"/architecture",permalink:"/architecture",draft:!1,editUrl:"https://github.com/shorebirdtech/docs/tree/main/docs/architecture.md",tags:[],version:"current",sidebarPosition:9,frontMatter:{sidebar_position:9,title:"\ud83c\udfdb\ufe0f Architecture",description:"How Shorebird works."},sidebar:"tutorialSidebar",previous:{title:"\ud83d\udc77 Status",permalink:"/status"},next:{title:"\ud83d\uded1 Uninstall",permalink:"/uninstall"}},s={},h=[{value:"Lifetime of a Shorebird Update",id:"lifetime-of-a-shorebird-update",level:2},{value:"Shorebird Components and Source Code",id:"shorebird-components-and-source-code",level:2},{value:"<code>shorebird</code> tool",id:"shorebird-tool",level:3},{value:"A Modified Flutter",id:"a-modified-flutter",level:3},{value:"flutter/engine &quot;The Flutter Engine&quot;",id:"flutterengine-the-flutter-engine",level:4},{value:"flutter/flutter &quot;The Flutter Framework&quot;",id:"flutterflutter-the-flutter-framework",level:4},{value:"flutter/buildroot &quot;The Buildroot&quot;",id:"flutterbuildroot-the-buildroot",level:4},{value:"Installing a Forked Flutter",id:"installing-a-forked-flutter",level:4},{value:"Serving Forked Binaries",id:"serving-forked-binaries",level:4},{value:"Shorebird&#39;s Cloud Infrastructure",id:"shorebirds-cloud-infrastructure",level:3}],u={toc:h},d="wrapper";function p(e){let{components:t,...r}=e;return(0,o.kt)(d,(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"shorebird-architecture"},"Shorebird Architecture"),(0,o.kt)("p",null,"Shorebird is a set of tools that allow you to build and deploy new versions of\nyour Flutter app directly to your users' devices."),(0,o.kt)("p",null,"This document exists to explain how Shorebird works and to provide a high-level\noverview of the components that make up the Shorebird system."),(0,o.kt)("h2",{id:"lifetime-of-a-shorebird-update"},"Lifetime of a Shorebird Update"),(0,o.kt)("p",null,"This assumes the developer already has installed Shorebird and has a working Flutter\nproject, as covered in the ",(0,o.kt)("a",{parentName:"p",href:"/"},"Getting Started")," guide."),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"shorebird init"),' tells Shorebird servers to create a new "App" entry associated\nwith your account as well as writes the resulting app_id to ',(0,o.kt)("inlineCode",{parentName:"p"},"shorebird.yaml")," in\nyour project."),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"shorebird release")," builds your app using ",(0,o.kt)("inlineCode",{parentName:"p"},"flutter build"),' and then uploads\nthe resulting binary to a private Google Cloud Storage bucket. The command\nalso creates a "release" record in our database that associates the app_id\nwith the release version.'),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"shorebird preview")," can be used to download and run any of these privately\nstored release binaries on your local device."),(0,o.kt)("p",null,"Developers then typically take the resulting .aab or .ipa and distribute it\nto their users, typically via the Play Store or App Store."),(0,o.kt)("p",null,"At some point later, developers use ",(0,o.kt)("inlineCode",{parentName:"p"},"shorebird patch")," to build a new version\nof their app. ",(0,o.kt)("inlineCode",{parentName:"p"},"shorebird patch"),' then downloads the previous release binary\nassociated with that app_id and version number (patches use the same version\nnumber as the release they are patching) and then builds a "patch diff" from\nthe combined release and patch binaries. This "patch diff" is then uploaded\nto a public Google Cloud Storage bucket where it will be served to devices\nrequesting an update with the corresponding app_id and release version.'),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"shorebird patch"),' also creates a record in our database that associates the\npatch with the app_id and release version and alerts our "patch check" servers\nthat a new patch is available. Patches can optionally be "staged" when\nuploaded. They will then not appear in patch checks until the patch "channel"\nis set to "stable" by the developer in the Shorebird Console.'),(0,o.kt)("p",null,'Release binaries which were built with Shorebird contain Shorebird\'s updater\nlibrary. By default, the updater library will check for patches every time\nthe app is started. This is done via a background thread to not slow down\nlaunch. The updater code makes a single request to our "patch check" servers\nwhich are again Google Cloud Run instances. The "patch check" servers\nrespond with the URL of the patch diff if one is available.'),(0,o.kt)("p",null,"A typical patch check is made via https, and contains:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "app_id": "uuid...",\n  "channel": "stable",\n  "release_version": "1.0.0",\n  "patch_number": 1,\n  "platform": "android",\n  "arch": "arm64-v8a"\n}\n')),(0,o.kt)("p",null,"A patch response contains:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "patch_available": true,\n  "patch": {\n    "number": 1,\n    "hash": "sha256...",\n    "download_url": "google cloud storage url"\n  }\n}\n')),(0,o.kt)("p",null,"The code to do these checks is open source as part of the Updater library\nand may change from what is documented above:\n",(0,o.kt)("a",{parentName:"p",href:"https://github.com/shorebirdtech/updater/blob/main/library/src/network.rs"},"https://github.com/shorebirdtech/updater/blob/main/library/src/network.rs")),(0,o.kt)("p",null,"The updater library then downloads the patch diff and applies it to the\nrelease binary. The patch diff is a binary diff. The updater library\nalso checks the hash of the patch diff to confirm download integrity."),(0,o.kt)("p",null,"The hash is not meant to be a security feature, but rather a way to detect\nerrors in the patch diff. A common error we see is that developers ",(0,o.kt)("inlineCode",{parentName:"p"},"shorebird\nrelease")," with one source and then actually build an release a different binary,\nresulting then in invalid patches. This hash helps detect such errors. We\ncurrently do not sign patches, but plan to add that capability in the near\nfuture."),(0,o.kt)("p",null,"The modified Flutter engine also reports successful or failed launch of\na patch back to our servers the next time it makes a patch check."),(0,o.kt)("p",null,"A patch event contains:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "app_id": "uuid...",\n  "arch": "arm64-v8a",\n  "platform": "android",\n  "type": "PatchInstallSuccess",\n  "release_version": "1.0.0",\n  "patch_number": 1\n}\n')),(0,o.kt)("p",null,"These events are used to display patch install analytics in the Shorebird\nConsole."),(0,o.kt)("p",null,'If a patch fails to launch after install, in addition to sending a\n"PatchInstallFailure" event, the updater library will also mark that patch\nnumber as "bad" locally and refuse to boot the app with that patch number again.\nThis is to prevent a bad patch from causing a crash loop on the device.'),(0,o.kt)("h2",{id:"shorebird-components-and-source-code"},"Shorebird Components and Source Code"),(0,o.kt)("p",null,"Shorebird consists of 3 major parts:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"shorebird")," line tool that you use to build and deploy your app."),(0,o.kt)("li",{parentName:"ul"},"A modified Flutter engine that you include in your app."),(0,o.kt)("li",{parentName:"ul"},"Our public-cloud based infrastructure which hosts your app's updates.")),(0,o.kt)("h3",{id:"shorebird-tool"},(0,o.kt)("inlineCode",{parentName:"h3"},"shorebird")," tool"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"shorebird")," commands are documented on this site. Most of the build\nlogic is just wrapping the ",(0,o.kt)("inlineCode",{parentName:"p"},"flutter")," tool and it also adds a few commands to\ninterface with Shorebird's servers."),(0,o.kt)("p",null,"The source for the ",(0,o.kt)("inlineCode",{parentName:"p"},"shorebird")," tool is available on GitHub:\n",(0,o.kt)("a",{parentName:"p",href:"https://github.com/shorebirdtech/shorebird/tree/main/packages/shorebird_cli"},"https://github.com/shorebirdtech/shorebird/tree/main/packages/shorebird_cli")),(0,o.kt)("h3",{id:"a-modified-flutter"},"A Modified Flutter"),(0,o.kt)("p",null,"Code push requires technical changes to the underlying Flutter engine. To make\nthose changes required forking Flutter."),(0,o.kt)("p",null,"We had to fork 4 Flutter and Dart repositories to make Shorebird work:"),(0,o.kt)("h4",{id:"flutterengine-the-flutter-engine"},'flutter/engine "The Flutter Engine"'),(0,o.kt)("p",null,"The Flutter engine is the C++ code that runs on the device. It is responsible\nfor rendering the UI, handling input, and communicating with the host."),(0,o.kt)("p",null,"We forked this code to add the\n",(0,o.kt)("a",{parentName:"p",href:"https://github.com/shorebirdtech/updater"},"Shorebird updater"),", which lets the\nFlutter engine load new code from Shorebird's servers."),(0,o.kt)("p",null,"Our Flutter Engine fork is public. You can see our engine changes on GitHub by\ncomparing our release branches to the upstream Flutter engine, e.g. for 3.16.9:\n",(0,o.kt)("a",{parentName:"p",href:"https://github.com/flutter/engine/compare/3.16.9...shorebirdtech:engine:flutter_release/3.16.9"},"https://github.com/flutter/engine/compare/3.16.9...shorebirdtech:engine:flutter_release/3.16.9")),(0,o.kt)("h4",{id:"flutterflutter-the-flutter-framework"},'flutter/flutter "The Flutter Framework"'),(0,o.kt)("p",null,"The flutter/flutter repo contains the Dart code that runs on the device as well\nas the ",(0,o.kt)("inlineCode",{parentName:"p"},"flutter")," tool that is used to build and run Flutter apps."),(0,o.kt)("p",null,"We forked this code to be able to deliver our modified Flutter engine to change\nthe version of the engine that the ",(0,o.kt)("inlineCode",{parentName:"p"},"flutter")," tool uses."),(0,o.kt)("p",null,"Our Flutter Framework fork is public. You can see our engine changes on GitHub\nby comparing our release branches to the upstream Flutter Framework, e.g. for\n3.16.9:\n",(0,o.kt)("a",{parentName:"p",href:"https://github.com/flutter/flutter/compare/3.16.9...shorebirdtech:flutter:flutter_release/3.16.9"},"https://github.com/flutter/flutter/compare/3.16.9...shorebirdtech:flutter:flutter_release/3.16.9")),(0,o.kt)("h4",{id:"flutterbuildroot-the-buildroot"},'flutter/buildroot "The Buildroot"'),(0,o.kt)("p",null,"The buildroot repo contains the build scripts that are used to build the\nFlutter engine for various platforms. It's separate from flutter/engine in\norder to share code and configuration with the Fuchsia build system."),(0,o.kt)("p",null,"We forked this code to make one small modification to the build setup to\nallow exposing our updater symbols from the Flutter engine up to\npackage:shorebird_code_push."),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://github.com/shorebirdtech/updater"},"https://github.com/shorebirdtech/updater"),"\nis a Rust library which we link into the engine. The way we do that is via\na C-API on a static library (libupdater.a). The default flags for linking\nfor the Flutter engine hide all symbols from linked static libraries. We\nneed to be able to expose the shorebird","_","*"," symbols from libupdater.a up through\nFFI to the Dart code. We did that my making one change to buildroot and then\na second change to the engine to place the symbols on the allow-list."),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://github.com/flutter/buildroot/compare/3.16.9...shorebirdtech:buildroot:flutter_release/3.16.9"},"https://github.com/flutter/buildroot/compare/3.16.9...shorebirdtech:buildroot:flutter_release/3.16.9")),(0,o.kt)("h4",{id:"installing-a-forked-flutter"},"Installing a Forked Flutter"),(0,o.kt)("p",null,"When you install Shorebird, it installs Flutter and Dart from our fork. These\nare currently not exposed on the user's path, rather private copies that\nShorebird will use when building your app."),(0,o.kt)("p",null,"This was necessary to avoid conflicts with other Flutter installations on the\nuser's machine. Specifically, the way that Flutter downloads artifacts is based\non the version of the engine. If we were to use the same version of the engine\nas the user's Flutter installation, then we would overwrite the user's engine\nartifacts."),(0,o.kt)("p",null,"We deliver our artifacts to this fork of Flutter with two ways. First is we\nchange the version of the engine in the ",(0,o.kt)("inlineCode",{parentName:"p"},"flutter")," tool. Second is we pass\nFLUTTER_STORAGE_BASE_URL set to download.shorebird.dev (instead of\ndownload.flutter.io) when calling our vended copy of the ",(0,o.kt)("inlineCode",{parentName:"p"},"flutter")," tool."),(0,o.kt)("p",null,"Currently this means ",(0,o.kt)("inlineCode",{parentName:"p"},"shorebird")," will not work in an environment where the\nuser needs to use FLUTTER_STORAGE_BASE_URL to download Flutter artifacts\nfrom a private mirror (e.g. a corporate network or China).\n",(0,o.kt)("a",{parentName:"p",href:"https://github.com/shorebirdtech/shorebird/issues/237"},"https://github.com/shorebirdtech/shorebird/issues/237")),(0,o.kt)("h4",{id:"serving-forked-binaries"},"Serving Forked Binaries"),(0,o.kt)("p",null,"We also use a custom server to handle requests from ",(0,o.kt)("inlineCode",{parentName:"p"},"flutter")," for our\nmodified engine. The source for that server is here:\n",(0,o.kt)("a",{parentName:"p",href:"https://github.com/shorebirdtech/shorebird/tree/main/packages/artifact_proxy"},"https://github.com/shorebirdtech/shorebird/tree/main/packages/artifact_proxy")),(0,o.kt)("p",null,"The artifact proxy is hosted at ",(0,o.kt)("a",{parentName:"p",href:"https://download.shorebird.dev"},"https://download.shorebird.dev")," via Google Cloud Run."),(0,o.kt)("p",null,"This proxy knows how to serve the modified binaries from our Google Storage\nbucket, as well as how to forward along requests to Google's Flutter storage\nbucket for unmodified binaries for all parts of Flutter we didn't have to\nmodify."),(0,o.kt)("h3",{id:"shorebirds-cloud-infrastructure"},"Shorebird's Cloud Infrastructure"),(0,o.kt)("p",null,"Shorebird's public-cloud based infrastructure is responsible for hosting your\napp's updates. It's a set of services that handle the following:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Release binary (private) storage"),(0,o.kt)("li",{parentName:"ul"},"Patch binary (public) storage and serving (via global CDN)"),(0,o.kt)("li",{parentName:"ul"},"Patch check requests (via Google Cloud Run)")),(0,o.kt)("p",null,"We also provide a web-based console for developers to manage their apps and\nview analytics as well as the underlying database that powers the patch checks\nand console."),(0,o.kt)("p",null,"Currently all of our infrastructure is hosted on Google Cloud Platform although\nwe will likely expand to other cloud providers over time. If we do, we will\nupdate our privacy policy to reflect such. All of these services are currently\nset to use US regions by default."))}p.isMDXComponent=!0}}]);