"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[927],{3905:(e,t,r)=>{r.d(t,{Zo:()=>d,kt:()=>f});var o=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,o)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,o,n=function(e,t){if(null==e)return{};var r,o,n={},i=Object.keys(e);for(o=0;o<i.length;o++)r=i[o],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)r=i[o],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var s=o.createContext({}),u=function(e){var t=o.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},d=function(e){var t=u(e.components);return o.createElement(s.Provider,{value:t},e.children)},h="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},p=o.forwardRef((function(e,t){var r=e.components,n=e.mdxType,i=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),h=u(r),p=n,f=h["".concat(s,".").concat(p)]||h[p]||c[p]||i;return r?o.createElement(f,a(a({ref:t},d),{},{components:r})):o.createElement(f,a({ref:t},d))}));function f(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=r.length,a=new Array(i);a[0]=p;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[h]="string"==typeof e?e:n,a[1]=l;for(var u=2;u<i;u++)a[u]=r[u];return o.createElement.apply(null,a)}return o.createElement.apply(null,r)}p.displayName="MDXCreateElement"},1527:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>c,frontMatter:()=>i,metadata:()=>l,toc:()=>u});var o=r(7462),n=(r(7294),r(3905));const i={sidebar_position:7,title:"\ud83c\udfdb\ufe0f Architecture",description:"How Shorebird works."},a=void 0,l={unversionedId:"architecture",id:"architecture",title:"\ud83c\udfdb\ufe0f Architecture",description:"How Shorebird works.",source:"@site/docs/architecture.md",sourceDirName:".",slug:"/architecture",permalink:"/architecture",draft:!1,editUrl:"https://github.com/shorebirdtech/docs/tree/main/docs/architecture.md",tags:[],version:"current",sidebarPosition:7,frontMatter:{sidebar_position:7,title:"\ud83c\udfdb\ufe0f Architecture",description:"How Shorebird works."},sidebar:"tutorialSidebar",previous:{title:"\u2753 FAQ",permalink:"/faq"},next:{title:"\ud83d\uded1 Uninstall",permalink:"/uninstall"}},s={},u=[{value:"Overview",id:"overview",level:2},{value:"<code>shorebird</code> tool",id:"shorebird-tool",level:2},{value:"A modified Flutter engine",id:"a-modified-flutter-engine",level:2},{value:"flutter/engine",id:"flutterengine",level:3},{value:"flutter/flutter",id:"flutterflutter",level:3},{value:"flutter/buildroot",id:"flutterbuildroot",level:3},{value:"Vendoring our fork",id:"vendoring-our-fork",level:2},{value:"Serving our forked binaries",id:"serving-our-forked-binaries",level:2}],d={toc:u},h="wrapper";function c(e){let{components:t,...r}=e;return(0,n.kt)(h,(0,o.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h2",{id:"overview"},"Overview"),(0,n.kt)("p",null,"Shorebird is a set of tools that allow you to build and deploy new versions of\nyour Flutter app directly to your users' devices."),(0,n.kt)("p",null,"Shorebird consists of 3 major parts:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"A command line tool that you use to build and deploy your app."),(0,n.kt)("li",{parentName:"ul"},"A modified Flutter engine that you include in your app."),(0,n.kt)("li",{parentName:"ul"},"Servers that host patches for your app.")),(0,n.kt)("h2",{id:"shorebird-tool"},(0,n.kt)("inlineCode",{parentName:"h2"},"shorebird")," tool"),(0,n.kt)("p",null,"The ",(0,n.kt)("inlineCode",{parentName:"p"},"shorebird")," tool is documented extensively elsewhere. Most of the build\nlogic is just wrapping the ",(0,n.kt)("inlineCode",{parentName:"p"},"flutter")," tool and it also adds a few commands to\ninterface with Shorebird's servers."),(0,n.kt)("h2",{id:"a-modified-flutter-engine"},"A modified Flutter engine"),(0,n.kt)("p",null,"Code push requires technical changes to the underlying Flutter engine. To make\nthose changes required forking Flutter."),(0,n.kt)("p",null,"We had to fork 3 Flutter repos to make Shorebird work:"),(0,n.kt)("h3",{id:"flutterengine"},"flutter/engine"),(0,n.kt)("p",null,"The Flutter engine is the C++ code that runs on the device. It is responsible\nfor rendering the UI, handling input, and communicating with the host."),(0,n.kt)("p",null,"We forked this code to add the\n",(0,n.kt)("a",{parentName:"p",href:"https://github.com/shorebirdtech/updater"},"Shorebird updater"),", which lets the\nFlutter engine load new code from Shorebird's servers."),(0,n.kt)("p",null,"At time of writing, Shorebird's fork is based on Flutter 3.7.12. You can see\nour engine changes here:\n",(0,n.kt)("a",{parentName:"p",href:"https://github.com/flutter/engine/compare/3.7.12...shorebirdtech:engine:stable_codepush"},"https://github.com/flutter/engine/compare/3.7.12...shorebirdtech:engine:stable_codepush")),(0,n.kt)("h3",{id:"flutterflutter"},"flutter/flutter"),(0,n.kt)("p",null,"The flutter/flutter repo contains the Dart code that runs on the device as well\nas the ",(0,n.kt)("inlineCode",{parentName:"p"},"flutter")," tool that is used to build and run Flutter apps."),(0,n.kt)("p",null,"We initially did not fork this code. And still don't really want to fork\nthis code, but in order to deliver a modified engine without affecting other\nFlutter installations, we needed to be able to change the ",(0,n.kt)("em",{parentName:"p"},"version")," of the\nengine that the ",(0,n.kt)("inlineCode",{parentName:"p"},"flutter")," tool downloads."),(0,n.kt)("p",null,"Our one fork is to change bin/internal/engine.version to point to our\nengine version. You can see our changes here:\n",(0,n.kt)("a",{parentName:"p",href:"https://github.com/flutter/flutter/compare/3.7.8...shorebirdtech:flutter:stable_codepush"},"https://github.com/flutter/flutter/compare/3.7.8...shorebirdtech:flutter:stable_codepush")),(0,n.kt)("h3",{id:"flutterbuildroot"},"flutter/buildroot"),(0,n.kt)("p",null,"The buildroot repo contains the build scripts that are used to build the\nFlutter engine for various platforms. It's separate from flutter/engine in\norder to share code and configuration with the Fuchsia build system."),(0,n.kt)("p",null,"We also didn't want to fork this code. However we need to for now in order\nto integrate our updater code. Our updater code:\n",(0,n.kt)("a",{parentName:"p",href:"https://github.com/shorebirdtech/updater"},"https://github.com/shorebirdtech/updater"),"\nis a Rust library which we link into the engine. The way we do that is via\na C-API on a static library (libupdater.a). The default flags for linking\nfor the Flutter engine hide all symbols from linked static libraries. We\nneed to be able to expose the shorebird","_","*"," symbols from libupdater.a up through\nFFI to the Dart code. We did that my making one change to buildroot and then\na second change to the engine to place the symbols on the allow-list."),(0,n.kt)("p",null,"Our one change:\n",(0,n.kt)("a",{parentName:"p",href:"https://github.com/shorebirdtech/buildroot/commit/7383548fa2306b5d53979ac5e9d176b35258811b"},"https://github.com/shorebirdtech/buildroot/commit/7383548fa2306b5d53979ac5e9d176b35258811b")),(0,n.kt)("h2",{id:"vendoring-our-fork"},"Vendoring our fork"),(0,n.kt)("p",null,"When you install Shorebird, it installs Flutter and Dart from our fork. These\nare currently not exposed on the user's path, rather just private copies\nthat Shorebird will use when building your app."),(0,n.kt)("p",null,"This was necessary to avoid conflicts with other Flutter installations on the\nuser's machine. Specifically, the way that Flutter downloads artifacts is\nbased on the version of the engine. If we were to use the same version of the\nengine as the user's Flutter installation, then we would overwrite the user's\nengine artifacts."),(0,n.kt)("p",null,"We deliver our artifacts to this fork of Flutter with two ways. First is we\nchange the version of the engine in the ",(0,n.kt)("inlineCode",{parentName:"p"},"flutter")," tool. Second is we pass\nFLUTTER_STORAGE_BASE_URL set to download.shorebird.dev (instead of\ndownload.flutter.io) when calling our vended copy of the ",(0,n.kt)("inlineCode",{parentName:"p"},"flutter")," tool."),(0,n.kt)("p",null,"Currently this means ",(0,n.kt)("inlineCode",{parentName:"p"},"shorebird")," will not work in an environment where the\nuser needs to use FLUTTER_STORAGE_BASE_URL to download Flutter artifacts\nfrom a private mirror (e.g. a corporate network or China).\n",(0,n.kt)("a",{parentName:"p",href:"https://github.com/shorebirdtech/shorebird/issues/237"},"https://github.com/shorebirdtech/shorebird/issues/237")),(0,n.kt)("h2",{id:"serving-our-forked-binaries"},"Serving our forked binaries"),(0,n.kt)("p",null,"We also use a custom server to handle requests from ",(0,n.kt)("inlineCode",{parentName:"p"},"flutter")," for our\n(modified) engine. You can see that server here:\n",(0,n.kt)("a",{parentName:"p",href:"https://github.com/shorebirdtech/shorebird/tree/main/packages/artifact_proxy"},"https://github.com/shorebirdtech/shorebird/tree/main/packages/artifact_proxy")),(0,n.kt)("p",null,"Our \"artifact_proxy\" knows how to serve the modified binaries from our\nGoogle Storage bucket, as well as how to serve unmodified binaries for all\nparts of Flutter we didn't have to modify from\nGoogle's Flutter Google storage bucket."))}c.isMDXComponent=!0}}]);